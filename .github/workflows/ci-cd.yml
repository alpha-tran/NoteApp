name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

  security-scan:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety
          
      - name: Run Backend Security Scan
        run: |
          set -e  # Exit on error
          echo "Running Bandit security scan..."
          bandit -r ./backend -f json -o security-report.json || true
          echo "Running Safety check..."
          safety check -r requirements.txt --json > safety-report.json || true
          
          # Verify reports exist
          if [ ! -f security-report.json ] || [ ! -f safety-report.json ]; then
            echo "Error: Security reports not generated!"
            exit 1
          fi
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Run Frontend Security Scan
        working-directory: ./frontend
        run: |
          npm audit --json > npm-audit.json || true
      
      - name: Run Codacy Analysis
        uses: codacy/codacy-analysis-cli-action@master
        with:
          output: results.sarif
          format: sarif
          # Adjust the Codacy API token as needed
          api-token: ${{ secrets.CODACY_API_TOKEN }}
          
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            security-report.json
            safety-report.json
            npm-audit.json
            results.sarif
          if-no-files-found: warn

  test-backend:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
      - name: Run backend tests with coverage
        working-directory: ./backend
        run: |
          python -m pytest tests/ --cov=app --cov-report=xml --junitxml=test-results.xml
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: backend-test-results
          path: |
            ./backend/test-results.xml
            ./backend/coverage.xml
            
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          
  test-frontend:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
          
      - name: Run frontend tests
        working-directory: ./frontend
        run: |
          npm test -- --watchAll=false --ci --coverage --reporters=default --reporters=jest-junit
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: frontend-test-results
          path: ./frontend/junit.xml
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info

  build:
    needs: [test-backend, test-frontend, security-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/noteapp-backend:latest,${{ secrets.DOCKER_USERNAME }}/noteapp-backend:${{ github.sha }}
      
      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/noteapp-frontend:latest,${{ secrets.DOCKER_USERNAME }}/noteapp-frontend:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Update deployment file
        run: |
          # Update image tags in deployment files
          sed -i "s|image:.*noteapp-backend.*|image: ${{ secrets.DOCKER_USERNAME }}/noteapp-backend:${{ github.sha }}|g" k8s/backend-deployment.yaml
          sed -i "s|image:.*noteapp-frontend.*|image: ${{ secrets.DOCKER_USERNAME }}/noteapp-frontend:${{ github.sha }}|g" k8s/frontend-deployment.yaml
          
      - name: Deploy to EKS
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}
          kubectl apply -f k8s/ 