# Optimized .gitlab-ci.yml with enhanced security
image: docker:24.0.7

services:
  - docker:24.0.7-dind

variables:
  DOCKER_REGISTRY: ${CI_REGISTRY}
  FRONTEND_IMAGE: ${CI_REGISTRY_IMAGE}/frontend
  BACKEND_IMAGE: ${CI_REGISTRY_IMAGE}/backend
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  SCAN_KUBERNETES_MANIFESTS: "true"
  SECURE_LOG_LEVEL: "debug"
  # Codacy variables
  CODACY_PROJECT_TOKEN: ${CODACY_PROJECT_TOKEN}
  # SonarCloud variables - Token should be set in GitLab CI/CD Variables
  SONAR_TOKEN: ${SONAR_TOKEN}
  SONAR_HOST_URL: "https://sonarcloud.io"
  SONAR_ORGANIZATION: "alpha-tran"
  SONAR_PROJECT_KEY: "alpha-tran_NoteApp"

stages:
  - validate
  - setup
  - test
  - security-scan
  - quality-scan
  - build
  - security-audit
  - deploy-dev
  - deploy-staging
  - deploy-prod
  - post-deploy

include:
  - template: Jobs/SAST.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml
  - template: Jobs/Container-Scanning.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Security/License-Management.gitlab-ci.yml

workflow:
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        VERSION: ${CI_COMMIT_TAG}
    - if: $CI_COMMIT_BRANCH
      variables:
        VERSION: ${CI_COMMIT_SHORT_SHA}

# Global configurations
default:
  tags:
    - docker
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# Cache configuration
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - frontend/node_modules/
    - backend/.venv/
    - ~/.cache/pip

# Validation Stage
validate:
  stage: validate
  image: python:3.12-slim
  script:
    - pip install pre-commit yamllint
    - pre-commit install
    - pre-commit run --all-files
    - yamllint .
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Setup Stage
setup_backend:
  stage: setup
  image: python:3.12-slim
  script:
    - python -m venv backend/.venv
    - . backend/.venv/bin/activate
    - pip install --upgrade pip setuptools wheel
    - pip install safety
    - cd backend
    - safety check -r requirements.txt
    - pip install -r requirements.txt
    - pip install bandit black pylint
  artifacts:
    paths:
      - backend/
    expire_in: 1 hour

setup_frontend:
  stage: setup
  image: node:20-alpine
  script:
    - cd frontend
    - npm audit
    - npm ci
    - npm install -g eslint prettier
  artifacts:
    paths:
      - frontend/
    expire_in: 1 hour

# Testing Stage
test_backend:
  stage: test
  image: python:3.12-slim
  needs: [setup_backend]
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  script:
    - cd backend
    - . .venv/bin/activate
    - black --check .
    - pylint src/
    - pytest tests/ --cov=src --cov-report=xml --cov-report=term --junitxml=junit.xml
    - bandit -r . -f json -o bandit-report.json
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage.xml
      sast: backend/bandit-report.json
      junit: backend/junit.xml
    paths:
      - backend/coverage.xml
      - backend/bandit-report.json
      - backend/junit.xml

test_frontend:
  stage: test
  image: node:20-alpine
  needs: [setup_frontend]
  script:
    - cd frontend
    - npm run lint
    - npm run test:coverage -- --ci --coverage
    - eslint . -f json -o eslint-report.json
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: frontend/coverage/cobertura-coverage.xml
      junit: frontend/junit.xml
    paths:
      - frontend/coverage/
      - frontend/eslint-report.json

# Security Scanning Stage
security_scan:
  stage: security-scan
  image: docker:24.0.7
  services:
    - docker:24.0.7-dind
  script:
    - apk add --no-cache curl
    - |
      # Install Trivy
      curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      # SAST Scan
      trivy fs --security-checks vuln,config,secret .
      # Container Scan
      trivy image $FRONTEND_IMAGE:$VERSION || true
      trivy image $BACKEND_IMAGE:$VERSION || true
      # IaC Scan
      trivy config --severity HIGH,CRITICAL ./infrastructure/k8s
  artifacts:
    reports:
      sast: gl-sast-report.json
  allow_failure: false

# Quality Scan Stage
quality_scan:
  stage: quality-scan
  image: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner \
        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
        -Dsonar.organization=${SONAR_ORGANIZATION} \
        -Dsonar.sources=. \
        -Dsonar.host.url=${SONAR_HOST_URL} \
        -Dsonar.login=${SONAR_TOKEN} \
        -Dsonar.qualitygate.wait=true
    - |
      if [ -n "$CODACY_PROJECT_TOKEN" ]; then
        codacy-analysis-cli analyze --directory . --upload --commit-uuid $CI_COMMIT_SHA
      fi
  allow_failure: true
  only:
    - merge_requests
    - main
    - develop

# Build Stage
.build_template: &build_definition
  stage: build
  script:
    - docker pull $IMAGE_NAME:latest || true
    - trivy image --no-progress --exit-code 1 --severity HIGH,CRITICAL $IMAGE_NAME:latest || true
    - >
      docker build
      --cache-from $IMAGE_NAME:latest
      --tag $IMAGE_NAME:$VERSION
      --tag $IMAGE_NAME:latest
      --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      --build-arg VCS_REF=$CI_COMMIT_SHA
      --build-arg VERSION=$VERSION
      $BUILD_CONTEXT
    - trivy image --no-progress --exit-code 1 --severity HIGH,CRITICAL $IMAGE_NAME:$VERSION
    - docker push $IMAGE_NAME:$VERSION
    - docker push $IMAGE_NAME:latest

build_frontend:
  <<: *build_definition
  variables:
    IMAGE_NAME: $FRONTEND_IMAGE
    BUILD_CONTEXT: ./frontend

build_backend:
  <<: *build_definition
  variables:
    IMAGE_NAME: $BACKEND_IMAGE
    BUILD_CONTEXT: ./backend

# Security Audit Stage
security_audit:
  stage: security-audit
  image: aquasec/trivy:latest
  script:
    - trivy image --exit-code 0 --no-progress --severity HIGH,CRITICAL $FRONTEND_IMAGE:$VERSION
    - trivy image --exit-code 0 --no-progress --severity HIGH,CRITICAL $BACKEND_IMAGE:$VERSION
    - trivy k8s --report summary ./infrastructure/k8s
  artifacts:
    reports:
      sast: gl-security-audit.json

# Deploy Stages
.deploy_template: &deploy_definition
  image: bitnami/kubectl:latest
  script:
    - kubectl config use-context $KUBE_CONTEXT
    - |
      kubectl apply -f infrastructure/k8s/config/
      kubectl apply -f infrastructure/k8s/network-policies/
      kubectl apply -f infrastructure/k8s/secrets/
      kubectl apply -f infrastructure/k8s/

deploy_dev:
  <<: *deploy_definition
  stage: deploy-dev
  variables:
    KUBE_CONTEXT: dev
  environment:
    name: development
    url: https://dev-noteapp.alpha-tran.com
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"

deploy_staging:
  <<: *deploy_definition
  stage: deploy-staging
  variables:
    KUBE_CONTEXT: staging
  environment:
    name: staging
    url: https://staging-noteapp.alpha-tran.com
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual

deploy_prod:
  <<: *deploy_definition
  stage: deploy-prod
  variables:
    KUBE_CONTEXT: prod
  environment:
    name: production
    url: https://noteapp.alpha-tran.com
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
  needs:
    - deploy_staging

# Post-deploy Stage
post_deploy:
  stage: post-deploy
  image: curlimages/curl:latest
  script:
    - |
      curl -X POST "${MONITORING_WEBHOOK_URL}" \
        -H "Content-Type: application/json" \
        -d "{\"version\":\"$VERSION\",\"environment\":\"$CI_ENVIRONMENT_NAME\"}"
  rules:
    - if: $CI_ENVIRONMENT_NAME